server:
  name: mainnet-blockscout
  config:
    bensUrl: "https://bens.services.blockscout.com"
    bsUrl: "https://eth.blockscout.com"
    bsApiKey: ""
tools:
  - name: __get_instructions__
    description: |
      This tool MUST be called BEFORE any other tool.
      Without calling it, the MCP server will not work as expected.
      It MUST be called once in a session.
    args: []
    responseTemplate:
      body: |
        Blockscout MCP server version: 0.1.0
        
        If you receive an error "421 Misdirected Request" for any tool, retry calling this tool up to 3 times until successful.

  - name: get_address_by_ens_name
    description: |
      Useful for when you need to convert an ENS domain name (e.g. "blockscout.eth") to its corresponding Ethereum address.
    args:
      - name: name
        description: "ENS domain name to resolve"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bensUrl}}/api/v1/1/domains/{{.args.name}}"
      method: GET
    responseTemplate:
      body: |
        {"resolved_address": "{{.resolved_address.hash}}"}

  - name: lookup_token_by_symbol
    description: |
      Search for token addresses by symbol or name. Returns multiple potential matches based on symbol or token name similarity.
    args:
      - name: symbol
        description: "Token symbol or name to search for"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/search?q={{.args.symbol}}&apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        [
          {{- range $index, $item := .items }}
          {{- if $index}},{{end}}
          {
            "address": "{{$item.address_hash}}",
            "name": "{{$item.name}}",
            "symbol": "{{$item.symbol}}",
            "token_type": "{{$item.token_type}}",
            "total_supply": "{{$item.total_supply}}",
            "circulating_market_cap": "{{$item.circulating_market_cap}}",
            "exchange_rate": "{{$item.exchange_rate}}",
            "is_smart_contract_verified": "{{$item.is_smart_contract_verified}}",
            "is_verified_via_admin_panel": "{{$item.is_verified_via_admin_panel}}"
          }
          {{- end }}
        ]

  - name: get_contract_abi
    description: |
      Get smart contract ABI (Application Binary Interface). An ABI defines all functions,
      events, their parameters, and return types. The ABI is required to format function
      calls or interpret contract data.
    args:
      - name: address
        description: "Smart contract address"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/smart-contracts/{{.args.address}}?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {"abi": "{{.abi}}"}

  - name: get_address_info
    description: |
      Get comprehensive information about an address, including:
      - Address existence check
      - Native token (ETH) balance (provided as is, without adjusting by decimals)
      - ENS name association (if any)
      - Contract status (whether the address is a contract)
      - Proxy contract information (if applicable): determines if a smart contract is a proxy contract (which forwards calls to implementation contracts), including proxy type and implementation addresses
      - Token details (if the contract is a token): name, symbol, decimals, total supply, etc.
    args:
      - name: address
        description: "Address to get information about"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/addresses/{{.args.address}}?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {{.}}

  - name: get_tokens_by_address
    description: |
      Get ERC20 tokens owned by an address.
    args:
      - name: address
        description: "Wallet address"
        type: string
        required: true
        position: path
      - name: fiat_value
        description: "Part of the combined next cursor to get the next page of results"
        type: string
        required: false
        position: query
      - name: id
        description: "Part of the combined next cursor to get the next page of results"
        type: integer
        required: false
        position: query
      - name: items_count
        description: "Part of the combined next cursor to get the next page of results"
        type: integer
        required: false
        position: query
      - name: value
        description: "Part of the combined next cursor to get the next page of results"
        type: string
        required: false
        position: query
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/addresses/{{.args.address}}/tokens?tokens=ERC-20&apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        [
          {{- range $index, $item := .items }}
          {{- if $index}},{{end}}
          {
            "address": "{{$item.token.address_hash}}",
            "name": "{{$item.token.name}}",
            "symbol": "{{$item.token.symbol}}",
            "decimals": "{{$item.token.decimals}}",
            "total_supply": "{{$item.token.total_supply}}",
            "circulating_market_cap": "{{$item.token.circulating_market_cap}}",
            "exchange_rate": "{{$item.token.exchange_rate}}",
            "volume_24h": "{{$item.token.volume_24h}}",
            "holders_count": "{{$item.token.holders_count}}",
            "balance": "{{$item.value}}"
          }
          {{- end }}
        ]
        {{- if .next_page_params }}

        ----
        To get the next page call get_tokens_by_address(<same address>, "{{.next_page_params.fiat_value}}", {{.next_page_params.id}}, {{.next_page_params.items_count}}, "{{.next_page_params.value}}")
        {{- end }}

  - name: get_latest_block
    description: |
      Get the latest indexed block number and timestamp, which represents the most recent state of the blockchain. No transactions or token transfers can exist beyond this point, making it useful as a reference timestamp for other API calls.
    args: []
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/main-page/blocks?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {
          "block_number": {{(index . 0).height}},
          "timestamp": "{{(index . 0).timestamp}}"
        }

  - name: get_transactions_by_address
    description: |
      Get transactions for an address within a specific time range.
      Use cases:
        - `get_transactions_by_address(address, age_from)` - get all transactions to/from the address since the given date up to the current time
        - `get_transactions_by_address(address, age_from, age_to)` - get all transactions to/from the address between the given dates
        - `get_transactions_by_address(address, age_from, age_to, methods)` - get all transactions to/from the address between the given dates and invoking the given method signature
      Manipulating `age_from` and `age_to` allows you to paginate through results by time ranges. For example, after getting transactions up to a certain timestamp, you can use that timestamp as `age_to` in the next query to get the next page of older transactions.
    args:
      # TODO: next_page_params are not used so far to paginate through results
      - name: address
        description: "Address which either sender or receiver of the transaction"
        type: string
        required: true
        position: query
      - name: age_from
        description: "Start date and time (e.g 2025-05-22T23:00:00.00Z). This parameter should be provided in most cases to limit transactions and avoid heavy database queries. Omit only if you absolutely need the full history."
        type: string
        required: false
        position: query
      - name: age_to
        description: "End date and time (e.g 2025-05-22T22:30:00.00Z). Can be omitted to get all transactions up to the current time."
        type: string
        required: false
        position: query
      - name: methods
        description: "A method signature to filter transactions by (e.g 0x304e6ade)"
        type: string
        required: false
        position: query
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/advanced-filters?to_address_hashes_to_include={{.args.address}}&from_address_hashes_to_include={{.args.address}}&apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {{.}}

  - name: get_token_transfers_by_address
    description: |
      Get ERC-20 token transfers for an address within a specific time range.
      Use cases:
        - `get_token_transfers_by_address(address, age_from)` - get all transfers of any ERC-20 token to/from the address since the given date up to the current time
        - `get_token_transfers_by_address(address, age_from, age_to)` - get all transfers of any ERC-20 token to/from the address between the given dates
        - `get_token_transfers_by_address(address, age_from, age_to, token)` - get all transfers of the given ERC-20 token to/from the address between the given dates
      Manipulating `age_from` and `age_to` allows you to paginate through results by time ranges. For example, after getting transfers up to a certain timestamp, you can use that timestamp as `age_to` in the next query to get the next page of older transfers.
    args:
      # TODO: next_page_params are not used so far to paginate through results
      - name: address
        description: "Address which either transfer initiator or transfer receiver"
        type: string
        required: true
        position: query
      - name: age_from
        description: "Start date and time (e.g 2025-05-22T23:00:00.00Z). This parameter should be provided in most cases to limit transfers and avoid heavy database queries. Omit only if you absolutely need the full history."
        type: string
        required: false
        position: query
      - name: age_to
        description: "End date and time (e.g 2025-05-22T22:30:00.00Z). Can be omitted to get all transfers up to the current time."
        type: string
        required: false
        position: query
      - name: token
        description: "An ERC-20 token contract address to filter transfers by a specific token. If omitted, returns transfers of all tokens."
        type: string
        default: ""
        position: query
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/advanced-filters?transaction_types=ERC-20&to_address_hashes_to_include={{.args.address}}&from_address_hashes_to_include={{.args.address}}&token_contract_address_hashes_to_include={{.args.token}}&apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {{.}}

  - name: transaction_summary
    description: |
      Useful to get initial summary of the transaction before its deep analysis.
      It is not guaranteed that the summary is 100% accurate.
      Not all transactions can be summarized.
    args:
      - name: hash
        description: "Transaction hash"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/transactions/{{.args.hash}}/summary"
      method: GET
    responseTemplate:
      body: |
        # Transaction Summary from Blockscout Transaction Interpreter
        {{.data.summaries}}

  - name: nft_tokens_by_address
    description: |
      Get NFT tokens owned by an address grouped by NFT collections (ERC-721, ERC-404, ERC-1155).
    args:
      # TODO: next_page_params are not used so far to paginate through results
      - name: address
        description: "NFT owner address"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/addresses/{{.args.address}}/nft/collections?type=ERC-721,ERC-404,ERC-1155&apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        [
          {{- range $index, $item := .items }}
          {{- if $index}},{{end}}
          {
            "collection": {
              "type": "{{$item.token.type}}",
              "address": "{{$item.token.address_hash}}",
              "name": "{{$item.token.name}}",
              "symbol": "{{$item.token.symbol}}",
              "holders_count": {{$item.token.holders_count}},
              "total_supply": {{$item.token.total_supply}}
            },
            "amount": "{{$item.amount}}",
            "token_instances": [
              {{- range $instIndex, $instance := $item.token_instances }}
              {{- if $instIndex}},{{end}}
              {
                "id": "{{$instance.id}}"
                {{- if $instance.metadata}}
                {{- if $instance.metadata.name}},
                "name": "{{$instance.metadata.name}}"
                {{- end}}
                {{- if $instance.metadata.description}},
                "description": "{{$instance.metadata.description}}"
                {{- end}}
                {{- if $instance.metadata.external_url}},
                "external_app_url": "{{$instance.metadata.external_url}}"
                {{- end}}
                {{- end}}
              }
              {{- end }}
            ]
          }
          {{- end }}
        ]

  - name: get_block_info
    description: |
      Get block information like timestamp, gas used, burnt fees, transaction count etc.
    args:
      - name: number_or_hash
        description: "Block number or hash"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/blocks/{{.args.number_or_hash}}?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {{.}}

  - name: get_transaction_info
    description: |
      Get comprehensive transaction information. 
      Unlike standard eth_getTransactionByHash, this tool returns enriched data including decoded input parameters, detailed token transfers with token metadata, address information (ENS names, contract verification status, public tags, proxy details), transaction fee breakdown (priority fees, burnt fees) and categorized transaction types. 
      Essential for transaction analysis, debugging smart contract interactions, tracking DeFi operations.
    args:
      - name: hash
        description: "Transaction hash"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/transactions/{{.args.hash}}?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        {{.}}

  - name: get_transaction_logs
    description: |
      Get comprehensive transaction logs with decoded event data.
      Unlike standard eth_getLogs, this tool returns enriched logs including decoded event parameters with types and values, detailed contract information (ENS names, verification status, public tags, proxy details, token metadata), block context, and categorized event signatures.
      Each log entry includes raw data, decoded method calls, parameter extraction, and contract classifications.
      Essential for analyzing smart contract events, tracking token transfers, monitoring DeFi protocol interactions, debugging event emissions, and understanding complex multi-contract transaction flows.
    args:
      - name: hash
        description: "Transaction hash"
        type: string
        required: true
        position: path
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/transactions/{{.args.hash}}/logs?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        **Items Structure:**
        - `address`: The queried address that emitted these logs (constant across all items)
        - `block_hash/block_number`: Block where the event was emitted
        - `index`: Log position within the block
        - `topics`: Raw indexed event parameters (first topic is event signature hash)
        - `data`: Raw non-indexed event parameters (hex encoded)

        **Event Decoding (misleadingly named fields):**
        - `method_call`: **Actually the event signature** (e.g., "Transfer(address indexed from, address indexed to, uint256 value)")
        - `method_id`: **Actually the event signature hash** (first 4 bytes of keccak256 hash)
        - `parameters`: Decoded event parameters with names, types, values, and indexing status

        **Transaction logs JSON:**
        {{.}}

  - name: get_address_logs
    description: |
      Get comprehensive logs emitted by a specific address with decoded event data.
      Returns enriched log entries including decoded event parameters with types and values, detailed contract information (ENS names, verification status, public tags, proxy details, token metadata), block context, transaction hashes, and event signatures.
      Each log entry includes raw data, decoded event names, parameter extraction with indexed/non-indexed classification, and contract classifications.
      Essential for analyzing smart contract events emitted by specific addresses, monitoring token contract activities, tracking DeFi protocol state changes, debugging contract event emissions, and understanding address-specific event history flows.
    args:
      - name: address
        description: "Account address"
        type: string
        required: true
        position: path
      - name: block_number
        description: "Part of the combined next cursor to get the next page of results"
        type: integer
        required: false
        position: query
      - name: index
        description: "Part of the combined next cursor to get the next page of results"
        type: integer
        required: false
        position: query
      - name: items_count
        description: "Part of the combined next cursor to get the next page of results"
        type: integer
        required: false
        position: query
    requestTemplate:
      url: "{{.config.bsUrl}}/api/v2/addresses/{{.args.address}}/logs?apikey={{.config.bsApiKey}}"
      method: GET
    responseTemplate:
      body: |
        **Items Structure:**
        - `address`: The queried address that emitted these logs (constant across all items)
        - `smart_contract`: The actual contract that generated the specific log event (varies per item)
        - `block_hash/block_number`: Block where the event was emitted
        - `transaction_hash`: Transaction that triggered the event
        - `index`: Log position within the block
        - `topics`: Raw indexed event parameters (first topic is event signature hash)
        - `data`: Raw non-indexed event parameters (hex encoded)

        **Event Decoding (misleadingly named fields):**
        - `method_call`: **Actually the event signature** (e.g., "Transfer(address indexed from, address indexed to, uint256 value)")
        - `method_id`: **Actually the event signature hash** (first 4 bytes of keccak256 hash)
        - `parameters`: Decoded event parameters with names, types, values, and indexing status

        **Address logs JSON:**
        {{.}}
        {{- if .next_page_params }}

        ----
        To get the next page call get_address_logs(<same address>, {{.next_page_params.block_number}}, {{.next_page_params.index}}, {{.next_page_params.items_count}})
        {{- end }}
